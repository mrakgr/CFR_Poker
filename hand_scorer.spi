open loop

// The hand is represented as a bitfield in an 64-bit integer.
type hand = u64
type card = i8
type suit = i8
type rank = i8

inl suit card : suit = card / 13
inl rank card : rank = card % 13
inl full {suit rank} : card = suit * 13 + rank

inl score is_full ~(suit_ranks : hand) = join
    inl score_hand {score hand} : u64 = (conv_int (score : i8) <<< 32) ||| conv_int (hand : u32)
    inl score = {
        high_card = 0i8
        pair = 1i8
        two_pair = 2i8
        triple = 3i8
        straight = 4i8
        flush = 5i8
        full_house = 6i8
        four_of_a_kind = 7i8
        straight_flush = 8i8
        }

    inl numSuits = 4i8
    inl numRanks = 13i8

    inl update (x : {suit : i8; rank : i8}) (hand : u32) = (hand <<< 6) + conv_int if is_full then full x else x.rank
    inl has_card v : u8 = conv_int (suit_ranks >>> i32 (full v)) &&& 1
    inl has_card' v : bool = to_bool (has_card v)

    inl fold_hand f =
        for {from=0; nearTo=numRanks} fun rank =>
            for {from=0; nearTo=numSuits} fun suit => f {suit rank}

    inl suits = 
        inl add (is_add : u8) (i : u8) (buckets : u16) = buckets + (conv_int is_add <<< i32 (4 * i))
        inl buckets = fold_hand (fun x => add (has_card x) (conv_int x.suit)) 0
        fun (i : i8): i8 => conv_int (buckets >>> i32 (4 * i)) &&& 15

    inl ranks =
        inl add (is_add : u8) (i : u8) (buckets : u64) = buckets + (conv_int is_add <<< i32 (3 * i))
        inl buckets = fold_hand (fun x => add (has_card x) (conv_int x.rank)) 0
        fun (i : i8): i8 => conv_int (buckets >>> i32 (3 * i)) &&& 7

    inl straigth_rank (rank : i8) (i : i8) = // Since the ace is both -1 and 12, it corrects for the former.
        inl rank = rank + i
        // `i = 0` will be partially evaled at compile time.
        if i = 0 && rank < 0 then rank + numRanks else rank 

    inl update_ranks rank c hand =
        let rec loop (suit : i8) (c : i8) hand =
            if suit < numSuits && 0 < c then
                if has_card' {rank suit} then loop (suit+1) (c-1) (update {rank suit} hand)
                else loop (suit+1) c hand
            else hand
        loop 0 c hand

    inl update_all exclusions (c : i8) hand =
        let rec loop_ranks (rank : i8) c hand =
            if 0 <= rank then
                if listm.fold (fun hand x => hand || x = rank) false exclusions then 
                    loop_ranks (rank-1) c hand
                else
                    let rec loop_suits (suit : i8) c hand = 
                        if 0 < c then
                            if suit < numSuits then
                                if has_card' {suit rank} then loop_suits (suit+1) (c-1) (update {suit rank} hand)
                                else loop_suits (suit+1) c hand
                            else loop_ranks (rank-1) c hand
                        else hand
                    loop_suits 0 c hand
            else hand
        loop_ranks (numRanks-1) c hand

    inl high_card() = score_hand {score=score.high_card; hand=update_all [] 5 0}
    inl pair() = 
        let rec loop_pair rank =
            if 0 <= rank then
                if ranks rank = 2 then
                    inl hand = update_ranks rank 2 0
                    score_hand {score=score.pair; hand=update_all [rank] 3 hand}
                else loop_pair (rank-1)
            else high_card()
        loop_pair (numRanks-1)
    inl two_pair() = 
        let rec loop_pair' rank =
            if 0 <= rank then
                if ranks rank = 2 then
                    inl hand = update_ranks rank 2 0
                    let rec loop_pair rank' =
                        if rank = rank' then loop_pair (rank'-1)
                        elif 0 <= rank' then
                            if ranks rank' = 2 then
                                inl hand = update_ranks rank' 2 hand
                                score_hand {score=score.two_pair; hand=update_all [rank;rank'] 1 hand}
                            else loop_pair (rank'-1)
                        else pair()
                    loop_pair (numRanks-1)
                else loop_pair' (rank-1)
            else pair()
        loop_pair' (numRanks-1)
    inl triple() =
        let rec loop_triple rank =
            if 0 <= rank then
                if ranks rank = 3 then
                    inl hand = update_ranks rank 3 0
                    score_hand {score=score.triple; hand=update_all [rank] 2 hand}
                else loop_triple (rank-1)
            else two_pair()
        loop_triple (numRanks-1)
    inl straight() =
        let rec loop rank =
            if -1 <= rank then 
                inl is_straight =
                    inl f i : i8 = if 0 < ranks (straigth_rank rank i) then 1 else 0
                    to_bool (f 4 &&& f 3 &&& f 2 &&& f 1 &&& f 0)
                if is_straight then
                    inl f i = update_ranks (straigth_rank rank i) 1
                    score_hand {score = score.straight; hand = 0 |> f 4 |> f 3 |> f 2 |> f 1 |> f 0}
                else loop (rank-1)
            else triple()
        loop (numRanks-5)
    inl flush() =
        let try_suit (suit : i8) =
            if 5 <= suits suit then
                let rec loop_ranks (rank : i8) (c : i8) h =
                    if 0 <= rank && 0 < c then
                        if has_card' {suit rank} then loop_ranks (rank-1) (c-1) (update {suit rank} h)
                        else loop_ranks (rank-1) c h
                    else h
                loop_ranks (numRanks-1) 5 0
            else 0
        inl hand = 0 |> max (try_suit 0) |> max (try_suit 1) |> max (try_suit 2) |> max (try_suit 3)
        if 0 < hand then score_hand {score=score.flush; hand}
        else straight()
    inl full_house() = 
        let rec loop_triple rank =
            if 0 <= rank then
                if ranks rank = 3 then
                    inl hand = update_ranks rank 3 0
                    let rec loop_pair rank' =
                        if 0 <= rank' then
                            if rank = rank' then loop_pair (rank'-1)
                            elif 2 <= ranks rank' then
                                score_hand {score=score.full_house; hand=update_ranks rank' 2 hand}
                            else loop_pair (rank'-1)
                        else flush()
                    loop_pair (numRanks-1)
                else loop_triple (rank-1)
            else flush()
        loop_triple (numRanks-1)
    inl four_of_a_kind() =
        let rec loop_ranks rank =
            if 0 <= rank then
                if ranks rank = 4 then
                    score_hand {score=score.four_of_a_kind; hand=0 |> update_ranks rank 4 |> update_all [rank] 1}
                else loop_ranks (rank-1)
            else full_house()
        loop_ranks (numRanks-1)
    inl straight_flush() =
        let try_suit (suit : i8) =
            if 5 <= suits suit then
                let rec loop_ranks (rank : i8) =
                    if -1 <= rank then
                        inl is_straight_flush =
                            inl f i = has_card {suit rank=straigth_rank rank i}
                            to_bool (f 4 &&& f 3 &&& f 2 &&& f 1 &&& f 0)
                        if is_straight_flush then 
                            inl f i = update {suit rank=straigth_rank rank i}
                            0 |> f 4 |> f 3 |> f 2 |> f 1 |> f 0
                        else loop_ranks (rank-1)
                    else 0
                loop_ranks (numRanks-5)
            else 0
        inl hand = 0 |> max (try_suit 0) |> max (try_suit 1) |> max (try_suit 2) |> max (try_suit 3)
        if 0 < hand then score_hand {score=score.straight_flush; hand}
        else four_of_a_kind()
    straight_flush()

inl decompress {score_hand=(x : u64)} : {score : i8; hand : card * card * card * card * card} =
    inl (score : i8) = conv_int (x >>> 32)
    inl (hand : u32) = conv_int x 
    inl f (a : u32) : u32 * card = a >>> 6,conv_int (a &&& 63)
    inl g (a,b : u32 * _) : u32 * card * _ = a >>> 6,conv_int (a &&& 63),b
    {score=score; hand=hand |> f |> g |> g |> g |> fun a,b => conv_int a,b}

// Get the hand score along with the actual hand.
let score' rank_suits = decompress {score_hand=score true rank_suits}

// Gets the hand score along with the hand ranks compressed into an u64.
inl score rank_suits = {score_hand=score false rank_suits}