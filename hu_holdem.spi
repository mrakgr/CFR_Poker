union action = Fold | Call | RaiseTo : st

type card = hand_scorer.card
type player = {hand : card * card; id : u8; pot : st}
type players = player * player

nominal hu_actions act = {
    is_fold : bool
    call : st
    is_raise : bool
    raise_min : st
    raise_max : st
    stack : st
    }
type actions = hu_actions action

inl score_fold (c : i8) (h : hand_scorer.hand) = h ||| (1 <<< i32 c)
let score (c1,c2) cs = 0 |> score_fold c1 |> score_fold c2 |> am.foldBack score_fold cs |> hand_scorer.score
let score_table' cs = 0 |> am.foldBack score_fold cs |> hand_scorer.score'
let score' (c1,c2) cs = 0 |> score_fold c1 |> score_fold c2 |> am.foldBack score_fold cs |> hand_scorer.score'

inl game (game_mode,sb,bb,stack) =
    inl deck : a st card = $"numpy.arange(0,52,dtype=numpy.int8)"
    $"numpy.random.shuffle(!deck)"

    inl actions is_fold call amount_min_raise : actions =
        inl is_raise = call < stack
        inl raise_min, raise_max = min stack amount_min_raise, stack
        hu_actions {is_fold is_raise call raise_min raise_max stack}

    inl rec betting ~is_init ~(p1,p2 : players) (community_cards : a st card * st) next = join
        inl betting (p1,p2) = betting false (p1,p2) community_cards next
        let next (p1,p2 : players) = next (if p1.id = 0 then p1,p2 else p2,p1)
        if p1.pot = stack then next (p1,p2)
        else
            inl is_fold = p1.pot <> p2.pot
            inl amount_call = max p1.pot p2.pot
            inl amount_min_raise = amount_call + max bb (amount_call - min p1.pot p2.pot)
            inl s = p1, p2, community_cards, stack, false // This bool is_showdown.
            action s p1.id (actions is_fold amount_call amount_min_raise) function
            | Fold => terminal s (r2 <| f32 if p1.id = 0 then -p1.pot else p1.pot)
            | Call =>
                inl p1 = {p1 with pot=p2.pot}
                if is_init then betting (p2,{p1 with pot=p2.pot}) else next (p1,p2)
            | RaiseTo pot =>  betting (p2,{p1 with pot})

    inl pot = min sb stack
    inl id = 0u8
    draw deck fun (c1, deck) =>
    notify (Some id) c1 fun () =>
    draw deck fun (c2, deck) =>
    notify (Some id) c2 fun () =>
    inl p1 = {pot id hand = c1,c2}

    inl pot = min bb stack
    inl id = 1u8
    draw deck fun (c1, deck) =>
    notify (Some id) c1 fun () =>
    draw deck fun (c2, deck) =>
    notify (Some id) c2 fun () =>
    inl p2 = {pot id hand = c1,c2}

    draw deck fun c3, deck =>
    draw deck fun c4, deck =>
    draw deck fun c5, deck =>
    draw deck fun c6, deck =>
    draw deck fun c7, deck =>

    let showdown (cs : a st _) (p1,p2 : players) =
        inl done = terminal (p1,p2,(cs,length cs),stack,true) << r2 << f32
        inl b = comp (score p1.hand cs) (score p2.hand cs)
        if eq_is b then done 0
        elif gt_is b then done p1.pot
        else done -p1.pot

    match game_mode with
    | 0u8 => // Holdem
        inl cs = a ;[c3;c4;c5;c6;c7]
        betting true (p1,p2) (cs,0) fun p1,p2 => // Preflop
        notify None c3 fun _ =>
        notify None c4 fun _ =>
        notify None c5 fun _ =>
        betting true (p1,p2) (cs,3) fun p1,p2 => // Flop
        notify None c6 fun _ =>
        betting true (p1,p2) (cs,4) fun p1,p2 => // Turn
        notify None c7 fun _ =>
        betting true (p1,p2) (cs,5) (showdown cs) // River
    | 1 => // Flop
        inl cs = a ;[c3;c4;c5]
        notify None c3 fun _ =>
        notify None c4 fun _ =>
        notify None c5 fun _ =>
        betting true (p1,p2) (cs,3) (showdown cs) // Flop
    | 2 => // River
        inl cs = a ;[c3;c4;c5;c6;c7]
        notify None c3 fun _ =>
        notify None c4 fun _ =>
        notify None c5 fun _ =>
        notify None c6 fun _ =>
        notify None c7 fun _ =>
        betting true (p1,p2) (cs,5) (showdown cs) // River
    | _ =>
        failwith "Unknown game mode."

let game a b = game a b